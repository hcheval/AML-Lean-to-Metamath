import MMExtraction.ConcreteExporter

namespace ML 

def runTestArray [Repr Œ±] [Repr Œ≤] [BEq Œ≤] (f : Œ± ‚Üí Œ≤) (tests : Array <| Œ± √ó Œ≤) (logging : Bool := true) : IO <| Array Œ± := do 
  let mut failed : Array Œ± := #[]
  let log : String ‚Üí IO Unit := if logging then IO.println else fun _ => pure ‚ü®‚ü©
  for ‚ü®test, expected‚ü© in tests do 
    if f test != expected then 
      log <| s!"Failed test {repr test}. Expected {repr <| f test} = {repr expected}"
      failed := failed.push test
  if failed.size > 0 then 
    log <| s! "Failed {failed.size} tests."
  else 
    log "All tests passed."
  return failed 

-- Tests for pattern to claim 
section PatternToClaim variable {ùïä : Type} [Repr ùïä] [ToMMClaim ùïä]

  def tests‚ÇÅ : Array <| Pattern Empty √ó String := #[
      ‚ü®‚ä•, "\\bot"‚ü©,
      ‚ü®.evar ‚ü®4‚ü©, "x4"‚ü©,
      ‚ü®.svar ‚ü®4‚ü©, "X4"‚ü©,  
      ‚ü®‚ä• ‚áí ‚ä•, "( \\imp \\bot \\bot )"‚ü©,
      ‚ü®‚ä• ‚áí ‚ä• ‚áí ‚ä•, "( \\imp \\bot ( \\imp \\bot \\bot ) )"‚ü©,
      ‚ü®(‚ä• ‚áí ‚ä•) ‚áí ‚ä•, "( \\imp ( \\imp \\bot \\bot ) \\bot )"‚ü©,
      ‚ü®‚ä• ‚¨ù ‚ä•, "( \\app \\bot \\bot )"‚ü©,
      ‚ü®‚ä• ‚¨ù ‚ä• ‚¨ù ‚ä•,"( \\app ( \\app \\bot \\bot ) \\bot )"‚ü©,
      ‚ü®‚ä• ‚¨ù (‚ä• ‚¨ù ‚ä•), "( \\app \\bot ( \\app \\bot \\bot ) )"‚ü©,
      ‚ü®‚àÉ‚àÉ ‚ü®3‚ü© (.evar ‚ü®3‚ü©), "( \\exists x3 x3 )"‚ü©,
      ‚ü®Œº ‚ü®3‚ü© (.svar ‚ü®3‚ü©), "( \\mu X3 X3 )"‚ü©
    ]

  inductive Signature where 
  | a | b | c 
    deriving Repr 

  instance : ToMMClaim Signature where 
    toMMClaim := fun œÉ => 
      match œÉ with
        | .a => "a"
        | .b => "b"
        | .c => "c"
    
  def testsSignature : Array <| Pattern Signature √ó String := #[
    ‚ü®.symbol .a, "a"‚ü©,
    ‚ü®.symbol .b, "b"‚ü©,
    ‚ü®.symbol .c, "c"‚ü©
  ]

  instance : ToMMClaim Definedness where 
    toMMClaim := (fun .defined => "\\definedness")

  def testsDefinedness : Array <| Pattern Definedness √ó String := #[
    ‚ü®‚åà‚ä•‚åâ, "( app \\definedness bot )"‚ü©
  ]


  #eval runTestArray Pattern.toMMClaim tests‚ÇÅ

  #eval runTestArray Pattern.toMMClaim testsSignature 

  deriving instance Repr for Definedness
  #eval runTestArray Pattern.toMMClaim testsDefinedness

end PatternToClaim






-- Tests for proof 
section WithVerifier variable {ùïä : Type} [ToMMClaim ùïä]

  def theorems : Array <| Œ£ œÜ : Pattern ùïä, Proof ‚àÖ œÜ := #[
    ‚ü®_, @ML.Proof.existence ùïä ‚àÖ (‚ü®0‚ü©)‚ü©
  ]

end WithVerifier